generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          String      @default("client")
  phone         String?
  address       String?
  createdAt     DateTime    @default(now())
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  invoices      Invoice[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service       String
  vehicle       Json
  description   String?
  requestedDate DateTime
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoices      Invoice[]
}

model Invoice {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointmentId String?     @db.ObjectId
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  amount        Float
  status        String      @default("draft")
  dueDate       DateTime
  items         Json[]
  createdAt     DateTime    @default(now())
}

model BlogPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  slug      String   @unique
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  brand  String
  model  String
  year   Int
  stages Json[]
}
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  name      String
  email     String   @unique
  location  String
  service   String
  rating    Int
  text      String
  image     String
  createdAt DateTime @default(now())
}